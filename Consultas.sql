--Liste el nombre del álbum más reciente de un artista.

SELECT  ALBUM_NAME
FROM 	ALBUMS
WHERE 	RELEASE_DATE = (SELECT MAX(AL.RELEASE_DATE)
						FROM ARTISTS AR
						JOIN TRACKS T ON AR.ARTIST_ID=T.ARTIST_ID
						JOIN ALBUMS AL ON AL.ALBUM_ID=T.ALBUM_ID
						WHERE ARTIST_NAME='Nirvana'
						);

--Genere un listado con las playlists que contienen al menos una canción con una popularidad superior al promedio general.

SELECT PLAYLIST_NAME
FROM PLAYLISTS P JOIN
PLAYLIST_TRACKS PT ON P.PLAYLIST_ID=PT.PLAYLIST_ID
JOIN TRACKS T ON T.TRACK_ID=PT.TRACK_ID
WHERE TRACK_POPULARITY > (SELECT AVG(TRACK_POPULARITY)
						  FROM TRACKS);

--Muestre las canciones cuya duración es mayor al promedio de un álbum ingresado por el usuario.

SELECT TRACK_NAME
FROM TRACKS
WHERE DURATION_MS > (SELECT AVG(DURATION_MS)
					FROM TRACKS T
					WHERE ALBUM_ID = 'ALB001');

--Para un nombre de playlist ingresado por el usuario, mostrar todas las canciones que contiene y su artista.

SELECT TRACK_NAME, ARTIST_NAME
FROM TRACKS T
JOIN ARTISTS A ON T.ARTIST_ID=A.ARTIST_ID
JOIN PLAYLIST_TRACKS PT ON PT.TRACK_ID=T.TRACK_ID
JOIN PLAYLISTS P ON PT.PLAYLIST_ID=P.PLAYLIST_ID
WHERE PLAYLIST_NAME = 'Classic Rock Essentials';

--Devuelva los nombres de las canciones que aparecen en más de una playlist.

SELECT TRACK_NAME
FROM TRACKS T
JOIN PLAYLIST_TRACKS PT ON PT.TRACK_ID=T.TRACK_ID
JOIN PLAYLISTS P ON PT.PLAYLIST_ID=P.PLAYLIST_ID
GROUP BY TRACK_NAME
HAVING COUNT(DISTINCT PLAYLIST_NAME) > 1

--Un bloque PL/SQL que reciba un track_id y determine si pertenece a una playlist de un subgénero específico, por ejemplo “rock alternativo”. Si sí, mostrar el nombre de la playlist; si no, indicar que no pertenece a ninguna.

DO $$
DECLARE
V_TRACK_ID VARCHAR(30);
V_SUB_GENRE VARCHAR(40);
V_OUT VARCHAR(130);
BEGIN
V_TRACK_ID := '6f807x0ima9a1j3VPbc7VN0';
V_SUB_GENRE := 'dance pop';

	SELECT PLAYLIST_NAME
	INTO V_OUT
	FROM PLAYLISTS P JOIN
	PLAYLIST_TRACKS PT ON P.PLAYLIST_ID=PT.PLAYLIST_ID
	WHERE SUBGENRE=V_SUB_GENRE
	AND TRACK_ID=V_TRACK_ID;

	IF V_OUT IS NULL THEN 
		V_OUT :='La cancion con id ' || V_TRACK_ID || ' no pertence a un playlist con el subgenero ' || V_SUB_GENRE;
	END IF;
	
	RAISE NOTICE '%', V_OUT;
END;
$$

--Procedimiento que genere un informe completo de un artista, incluyendo:

--Nombre del artista

--Número de pistas

--Número de álbumes

--Promedio de duración

--Playlist en la que aparece con mayor frecuencia

CREATE OR REPLACE PROCEDURE ARTIST_REPORT(IN V_ARTIST_ID INTEGER, OUT V_TOTAL_TRACKS INTEGER, OUT V_TOTAL_ALBUMS INTEGER,OUT V_AVERAGE_DURATION INTEGER, OUT V_MOST_FRECUENCY_PLAYLIST VARCHAR(180))
LANGUAGE plpgsql
AS $$
DECLARE
	V_TEMP INTEGER;
BEGIN
	SELECT COUNT(TRACK_ID)
	INTO V_TOTAL_TRACKS
	FROM TRACKS
	WHERE ARTIST_ID = V_ARTIST_ID;

	SELECT COUNT(A.ALBUM_ID)
	INTO V_TOTAL_ALBUMS
	FROM TRACKS T JOIN
	ALBUMS A ON A.ALBUM_ID=T.ALBUM_ID
	WHERE ARTIST_ID = V_ARTIST_ID;

	SELECT AVG(DURATION_MS)
	INTO V_AVERAGE_DURATION
	FROM TRACKS
	WHERE ARTIST_ID = V_ARTIST_ID;

	SELECT PLAYLIST_NAME, COUNT(ARTIST_ID)
	INTO V_MOST_FRECUENCY_PLAYLIST, V_TEMP
	FROM TRACKS T JOIN
	PLAYLIST_TRACKS PT ON PT.TRACK_ID=T.TRACK_ID JOIN
	PLAYLISTS P ON P.PLAYLIST_ID=PT.PLAYLIST_ID
	WHERE ARTIST_ID = V_ARTIST_ID
	GROUP BY PLAYLIST_NAME
	ORDER BY 2 DESC
	LIMIT 1;
END;
$$;

DO $$
DECLARE
V_ARTIST_ID INTEGER;
V_TOTAL_TRACKS INTEGER;
V_TOTAL_ALBUMS INTEGER;
V_AVERAGE_DURATION INTEGER;
V_MOST_FRECUENCY_PLAYLIST VARCHAR(180);
BEGIN
V_ARTIST_ID := 29941;
CALL ARTIST_REPORT(V_ARTIST_ID, V_TOTAL_TRACKS, V_TOTAL_ALBUMS, V_AVERAGE_DURATION, V_MOST_FRECUENCY_PLAYLIST);
	
	RAISE NOTICE '%', V_ARTIST_ID;
	RAISE NOTICE '%', V_TOTAL_TRACKS;
	RAISE NOTICE '%', V_TOTAL_ALBUMS;
	RAISE NOTICE '%', V_AVERAGE_DURATION;
	RAISE NOTICE '%', V_MOST_FRECUENCY_PLAYLIST;
END;
$$

--Dado el nombre de dos álbumes, compara sus métricas y muestra:

--Promedio de popularidad de pistas

--Total de pistas

--Álbum con mayor danceability promedio

--Diferencia en duración total

CREATE OR REPLACE PROCEDURE COMPARE_TWO_ALBUMS(
IN V_ALBUM_NAME_1 VARCHAR(200),
IN V_ALBUM_NAME_2 VARCHAR(200),
OUT V_AVG_TRACKS1 DOUBLE PRECISION,
OUT V_AVG_TRACKS2 DOUBLE PRECISION,
OUT V_TOTAL_TRACKS1 DOUBLE PRECISION,
OUT V_TOTAL_TRACKS2 DOUBLE PRECISION,
OUT V_AVG_DANCEABILITY1 DOUBLE PRECISION,
OUT V_TOTAL_DURATION1 DOUBLE PRECISION,
OUT V_AVG_DANCEABILITY2 DOUBLE PRECISION,
OUT V_TOTAL_DURATION2 DOUBLE PRECISION)
LANGUAGE plpgsql
AS $$
BEGIN

SELECT AVG(TRACK_POPULARITY)
INTO V_AVG_TRACKS1
FROM TRACKS T
JOIN ALBUMS A ON A.ALBUM_ID=T.ALBUM_ID
WHERE UPPER(ALBUM_NAME)=UPPER(V_ALBUM_NAME_1);

SELECT AVG(TRACK_POPULARITY)
INTO V_AVG_TRACKS2
FROM TRACKS T
JOIN ALBUMS A ON A.ALBUM_ID=T.ALBUM_ID
WHERE UPPER(ALBUM_NAME)=UPPER(V_ALBUM_NAME_2);

SELECT COUNT(TRACK_NAME)
INTO V_TOTAL_TRACKS1
FROM TRACKS T
JOIN ALBUMS A ON A.ALBUM_ID=T.ALBUM_ID
WHERE UPPER(ALBUM_NAME)=UPPER(V_ALBUM_NAME_1);

SELECT COUNT(TRACK_NAME)
INTO V_TOTAL_TRACKS2
FROM TRACKS T
JOIN ALBUMS A ON A.ALBUM_ID=T.ALBUM_ID
WHERE UPPER(ALBUM_NAME)=UPPER(V_ALBUM_NAME_2);

SELECT AVG(DANCEABILITY)
INTO V_AVG_DANCEABILITY1
FROM TRACKS T
JOIN ALBUMS A ON A.ALBUM_ID=T.ALBUM_ID
WHERE UPPER(ALBUM_NAME)=UPPER(V_ALBUM_NAME_1);

SELECT AVG(DANCEABILITY)
INTO V_AVG_DANCEABILITY2
FROM TRACKS T
JOIN ALBUMS A ON A.ALBUM_ID=T.ALBUM_ID
WHERE UPPER(ALBUM_NAME)=UPPER(V_ALBUM_NAME_2);

SELECT SUM(DURATION_MS)/60000.0
INTO V_TOTAL_DURATION1
FROM TRACKS T
JOIN ALBUMS A ON A.ALBUM_ID=T.ALBUM_ID
WHERE UPPER(ALBUM_NAME)=UPPER(V_ALBUM_NAME_1);

SELECT SUM(DURATION_MS)/60000.0
INTO V_TOTAL_DURATION2
FROM TRACKS T
JOIN ALBUMS A ON A.ALBUM_ID=T.ALBUM_ID
WHERE UPPER(ALBUM_NAME)=UPPER(V_ALBUM_NAME_2);


END;
$$;

DO $$
DECLARE
    V_ALBUM_NAME_1 VARCHAR(200) := 'Memories (Dillon Francis Remix)';
    V_ALBUM_NAME_2 VARCHAR(200) := 'Beautiful People (feat. Khalid) [Jack Wins Remix]';

    V_AVG_TRACKS1 DOUBLE PRECISION;
    V_AVG_TRACKS2 DOUBLE PRECISION;
    V_TOTAL_TRACKS1 DOUBLE PRECISION;
    V_TOTAL_TRACKS2 DOUBLE PRECISION;
    V_AVG_DANCEABILITY1 DOUBLE PRECISION;
    V_TOTAL_DURATION1 DOUBLE PRECISION;
    V_AVG_DANCEABILITY2 DOUBLE PRECISION;
    V_TOTAL_DURATION2 DOUBLE PRECISION;
BEGIN

    CALL COMPARE_TWO_ALBUMS(
        V_ALBUM_NAME_1,
        V_ALBUM_NAME_2,
        V_AVG_TRACKS1,
        V_AVG_TRACKS2,
        V_TOTAL_TRACKS1,
        V_TOTAL_TRACKS2,
        V_AVG_DANCEABILITY1,
        V_TOTAL_DURATION1,
        V_AVG_DANCEABILITY2,
        V_TOTAL_DURATION2
    );

	RAISE NOTICE 'Comparacion de albumes';
	RAISE NOTICE 'Álbum 1: %', V_ALBUM_NAME_1;
	RAISE NOTICE 'Álbum 2: %', V_ALBUM_NAME_2;

	IF V_AVG_DANCEABILITY1>V_AVG_DANCEABILITY2 THEN
		 RAISE NOTICE 'El álbum con mayor danceability promedio es (%), con una danceability promedio de: %', V_ALBUM_NAME_1, V_AVG_DANCEABILITY1;
    ELSE RAISE NOTICE 'El álbum con mayor danceability promedio es (%), con una danceability promedio de: %', V_ALBUM_NAME_2, V_AVG_DANCEABILITY2;

	END IF;

	IF V_TOTAL_DURATION1 > V_TOTAL_DURATION2 THEN 
		 RAISE NOTICE 'Diferencia de duración total: % a favor del álbum %', V_TOTAL_DURATION1, V_ALBUM_NAME_1;
	ELSE RAISE NOTICE 'Diferencia de duración total: % a favor del álbum %', V_TOTAL_DURATION2, V_ALBUM_NAME_2;
	END IF;
END;
$$;

